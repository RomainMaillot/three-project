{"id":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","dependencies":[{"name":"/Applications/Cours/H2/dev/three-project/package.json","includedInParent":true,"mtime":1548164082730},{"name":"/Applications/Cours/H2/dev/three-project/node_modules/postprocessing/package.json","includedInParent":true,"mtime":1548164412950},{"name":"three","loc":{"line":1,"column":49},"parent":"/Applications/Cours/H2/dev/three-project/node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","resolved":"/Applications/Cours/H2/dev/three-project/node_modules/three/build/three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SMAAWeightsMaterial = void 0;\n\nvar _three = require(\"three\");\n\nconst fragment = \"#define sampleLevelZeroOffset(t, coord, offset) texture2D(t, coord + float(offset) * texelSize, 0.0)\\r\\n\\r\\nuniform sampler2D inputBuffer;\\r\\nuniform sampler2D areaTexture;\\r\\nuniform sampler2D searchTexture;\\r\\n\\r\\nuniform vec2 texelSize;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nvarying vec4 vOffset[3];\\r\\nvarying vec2 vPixCoord;\\r\\n\\r\\nvec2 round(vec2 x) {\\r\\n\\r\\n\\treturn sign(x) * floor(abs(x) + 0.5);\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchLength(vec2 e, float bias, float scale) {\\r\\n\\r\\n\\t// Not required if searchTexture accesses are set to point.\\r\\n\\t// const vec2 SEARCH_TEX_PIXEL_SIZE = 1.0 / vec2(66.0, 33.0);\\r\\n\\t// e = vec2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE + e * vec2(scale, 1.0) * vec2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\\r\\n\\r\\n\\te.r = bias + e.r * scale;\\r\\n\\r\\n\\treturn 255.0 * texture2D(searchTexture, e, 0.0).r;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchXLeft(vec2 texCoord, float end) {\\r\\n\\r\\n\\t/* @PSEUDO_GATHER4\\r\\n\\t * This texCoord has been offset by (-0.25, -0.125) in the vertex shader to\\r\\n\\t * sample between edge, thus fetching four edges in a row.\\r\\n\\t * Sampling with different offsets in each direction allows to disambiguate\\r\\n\\t * which edges are active from the four fetched ones.\\r\\n\\t */\\r\\n\\r\\n\\tvec2 e = vec2(0.0, 1.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord -= vec2(2.0, 0.0) * texelSize;\\r\\n\\r\\n\\t\\tif(!(texCoord.x > end && e.g > 0.8281 && e.r == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Correct the previously applied offset (-0.25, -0.125).\\r\\n\\ttexCoord.x += 0.25 * texelSize.x;\\r\\n\\r\\n\\t// The searches are biased by 1, so adjust the coords accordingly.\\r\\n\\ttexCoord.x += texelSize.x;\\r\\n\\r\\n\\t// Disambiguate the length added by the last step.\\r\\n\\ttexCoord.x += 2.0 * texelSize.x; // Undo last step.\\r\\n\\ttexCoord.x -= texelSize.x * searchLength(e, 0.0, 0.5);\\r\\n\\r\\n\\treturn texCoord.x;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchXRight(vec2 texCoord, float end) {\\r\\n\\r\\n\\tvec2 e = vec2(0.0, 1.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord += vec2(2.0, 0.0) * texelSize;\\r\\n\\r\\n\\t\\tif(!(texCoord.x < end && e.g > 0.8281 && e.r == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\ttexCoord.x -= 0.25 * texelSize.x;\\r\\n\\ttexCoord.x -= texelSize.x;\\r\\n\\ttexCoord.x -= 2.0 * texelSize.x;\\r\\n\\ttexCoord.x += texelSize.x * searchLength(e, 0.5, 0.5);\\r\\n\\r\\n\\treturn texCoord.x;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchYUp(vec2 texCoord, float end) {\\r\\n\\r\\n\\tvec2 e = vec2(1.0, 0.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord += vec2(0.0, 2.0) * texelSize; // Changed sign.\\r\\n\\r\\n\\t\\tif(!(texCoord.y > end && e.r > 0.8281 && e.g == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\ttexCoord.y -= 0.25 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y -= texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y -= 2.0 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y += texelSize.y * searchLength(e.gr, 0.0, 0.5); // Changed sign.\\r\\n\\r\\n\\treturn texCoord.y;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchYDown(vec2 texCoord, float end) {\\r\\n\\r\\n\\tvec2 e = vec2(1.0, 0.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i ) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord -= vec2(0.0, 2.0) * texelSize; // Changed sign.\\r\\n\\r\\n\\t\\tif(!(texCoord.y < end && e.r > 0.8281 && e.g == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\ttexCoord.y += 0.25 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y += texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y += 2.0 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y -= texelSize.y * searchLength(e.gr, 0.5, 0.5); // Changed sign.\\r\\n\\r\\n\\treturn texCoord.y;\\r\\n\\r\\n}\\r\\n\\r\\nvec2 area(vec2 dist, float e1, float e2, float offset) {\\r\\n\\r\\n\\t// Rounding prevents precision errors of bilinear filtering.\\r\\n\\tvec2 texCoord = AREATEX_MAX_DISTANCE * round(4.0 * vec2(e1, e2)) + dist;\\r\\n\\r\\n\\t// Scale and bias for texel space translation.\\r\\n\\ttexCoord = AREATEX_PIXEL_SIZE * texCoord + (0.5 * AREATEX_PIXEL_SIZE);\\r\\n\\r\\n\\t// Move to proper place, according to the subpixel offset.\\r\\n\\ttexCoord.y += AREATEX_SUBTEX_SIZE * offset;\\r\\n\\r\\n\\treturn texture2D(areaTexture, texCoord, 0.0).rg;\\r\\n\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvec4 weights = vec4(0.0);\\r\\n\\tvec4 subsampleIndices = vec4(0.0);\\r\\n\\tvec2 e = texture2D(inputBuffer, vUv).rg;\\r\\n\\r\\n\\tif(e.g > 0.0) {\\r\\n\\r\\n\\t\\t// Edge at north.\\r\\n\\t\\tvec2 d;\\r\\n\\r\\n\\t\\t// Find the distance to the left.\\r\\n\\t\\tvec2 coords;\\r\\n\\t\\tcoords.x = searchXLeft(vOffset[0].xy, vOffset[2].x);\\r\\n\\t\\tcoords.y = vOffset[1].y; // vOffset[1].y = vUv.y - 0.25 * texelSize.y (@CROSSING_OFFSET)\\r\\n\\t\\td.x = coords.x;\\r\\n\\r\\n\\t\\t/* Now fetch the left crossing edges, two at a time using bilinear\\r\\n\\t\\tfiltering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to discern what\\r\\n\\t\\tvalue each edge has. */\\r\\n\\t\\tfloat e1 = texture2D(inputBuffer, coords, 0.0).r;\\r\\n\\r\\n\\t\\t// Find the distance to the right.\\r\\n\\t\\tcoords.x = searchXRight(vOffset[0].zw, vOffset[2].y);\\r\\n\\t\\td.y = coords.x;\\r\\n\\r\\n\\t\\t/* Translate distances to pixel units for better interleave arithmetic and\\r\\n\\t\\tmemory accesses. */\\r\\n\\t\\td = d / texelSize.x - vPixCoord.x;\\r\\n\\r\\n\\t\\t// The area texture is compressed quadratically.\\r\\n\\t\\tvec2 sqrtD = sqrt(abs(d));\\r\\n\\r\\n\\t\\t// Fetch the right crossing edges.\\r\\n\\t\\tcoords.y -= texelSize.y; // WebGL port note: Added.\\r\\n\\t\\tfloat e2 = sampleLevelZeroOffset(inputBuffer, coords, ivec2(1, 0)).r;\\r\\n\\r\\n\\t\\t// Pattern recognised, now get the actual area.\\r\\n\\t\\tweights.rg = area(sqrtD, e1, e2, subsampleIndices.y);\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tif(e.r > 0.0) {\\r\\n\\r\\n\\t\\t// Edge at west.\\r\\n\\t\\tvec2 d;\\r\\n\\r\\n\\t\\t// Find the distance to the top.\\r\\n\\t\\tvec2 coords;\\r\\n\\t\\tcoords.y = searchYUp(vOffset[1].xy, vOffset[2].z);\\r\\n\\t\\tcoords.x = vOffset[0].x; // vOffset[1].x = vUv.x - 0.25 * texelSize.x;\\r\\n\\t\\td.x = coords.y;\\r\\n\\r\\n\\t\\t// Fetch the top crossing edges.\\r\\n\\t\\tfloat e1 = texture2D(inputBuffer, coords, 0.0).g;\\r\\n\\r\\n\\t\\t// Find the distance to the bottom.\\r\\n\\t\\tcoords.y = searchYDown(vOffset[1].zw, vOffset[2].w);\\r\\n\\t\\td.y = coords.y;\\r\\n\\r\\n\\t\\t// Distances in pixel units.\\r\\n\\t\\td = d / texelSize.y - vPixCoord.y;\\r\\n\\r\\n\\t\\t// The area texture is compressed quadratically.\\r\\n\\t\\tvec2 sqrtD = sqrt(abs(d));\\r\\n\\r\\n\\t\\t// Fetch the bottom crossing edges.\\r\\n\\t\\tcoords.y -= texelSize.y; // WebGL port note: Added.\\r\\n\\t\\tfloat e2 = sampleLevelZeroOffset(inputBuffer, coords, ivec2(0, 1)).g;\\r\\n\\r\\n\\t\\t// Get the area for this direction.\\r\\n\\t\\tweights.ba = area(sqrtD, e1, e2, subsampleIndices.x);\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tgl_FragColor = weights;\\r\\n\\r\\n}\\r\\n\";\nconst vertex = \"uniform vec2 texelSize;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nvarying vec4 vOffset[3];\\r\\nvarying vec2 vPixCoord;\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvUv = uv;\\r\\n\\r\\n\\tvPixCoord = uv / texelSize;\\r\\n\\r\\n\\t// Offsets for the searches (see @PSEUDO_GATHER4).\\r\\n\\tvOffset[0] = uv.xyxy + texelSize.xyxy * vec4(-0.25, 0.125, 1.25, 0.125); // Changed sign in Y and W components.\\r\\n\\tvOffset[1] = uv.xyxy + texelSize.xyxy * vec4(-0.125, 0.25, -0.125, -1.25); //Changed sign in Y and W components.\\r\\n\\r\\n\\t// This indicates the ends of the loops.\\r\\n\\tvOffset[2] = vec4(vOffset[0].xz, vOffset[1].yw) + vec4(-2.0, 2.0, -2.0, 2.0) * texelSize.xxyy * MAX_SEARCH_STEPS_FLOAT;\\r\\n\\r\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\r\\n\\r\\n}\\r\\n\";\n/**\r\n * Subpixel Morphological Antialiasing.\r\n *\r\n * This material computes weights for detected edges.\r\n */\n\nclass SMAAWeightsMaterial extends _three.ShaderMaterial {\n  /**\r\n   * Constructs a new SMAA weights material.\r\n   *\r\n   * @param {Vector2} [texelSize] - The absolute screen texel size.\r\n   */\n  constructor(texelSize = new _three.Vector2()) {\n    super({\n      type: \"SMAAWeightsMaterial\",\n      defines: {\n        // Configurable settings:\n        MAX_SEARCH_STEPS_INT: \"8\",\n        MAX_SEARCH_STEPS_FLOAT: \"8.0\",\n        // Non-configurable settings:\n        AREATEX_MAX_DISTANCE: \"16.0\",\n        AREATEX_PIXEL_SIZE: \"(1.0 / vec2(160.0, 560.0))\",\n        AREATEX_SUBTEX_SIZE: \"(1.0 / 7.0)\",\n        SEARCHTEX_SIZE: \"vec2(66.0, 33.0)\",\n        SEARCHTEX_PACKED_SIZE: \"vec2(64.0, 16.0)\"\n      },\n      uniforms: {\n        inputBuffer: new _three.Uniform(null),\n        areaTexture: new _three.Uniform(null),\n        searchTexture: new _three.Uniform(null),\n        texelSize: new _three.Uniform(texelSize)\n      },\n      fragmentShader: fragment,\n      vertexShader: vertex,\n      depthWrite: false,\n      depthTest: false\n    });\n  }\n  /**\r\n   * Sets the maximum amount of steps performed in the horizontal/vertical\r\n   * pattern searches, at each side of the pixel.\r\n   *\r\n   * In number of pixels, it's actually the double. So the maximum line length\r\n   * perfectly handled by, for example 16, is 64 (perfectly means that longer\r\n   * lines won't look as good, but are still antialiased).\r\n   *\r\n   * @param {Number} steps - The search steps. Range: [0, 112].\r\n   */\n\n\n  setOrthogonalSearchSteps(steps) {\n    this.defines.MAX_SEARCH_STEPS_INT = steps.toFixed(\"0\");\n    this.defines.MAX_SEARCH_STEPS_FLOAT = steps.toFixed(\"1\");\n    this.needsUpdate = true;\n  }\n\n}\n\nexports.SMAAWeightsMaterial = SMAAWeightsMaterial;","map":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":3,"column":0}},{"name":"fragment","generated":{"line":10,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":3,"column":6}},{"generated":{"line":10,"column":14},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":3,"column":14}},{"generated":{"line":10,"column":17},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":3,"column":17}},{"generated":{"line":10,"column":6714},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":4,"column":0}},{"name":"vertex","generated":{"line":11,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":4,"column":6}},{"generated":{"line":11,"column":12},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":4,"column":12}},{"generated":{"line":11,"column":15},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":4,"column":15}},{"generated":{"line":11,"column":761},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":6,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":7}},{"name":"SMAAWeightsMaterial","generated":{"line":18,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":13}},{"generated":{"line":18,"column":25},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":7}},{"name":"ShaderMaterial","generated":{"line":18,"column":34},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":41}},{"generated":{"line":18,"column":55},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":7}},{"generated":{"line":18,"column":56},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":56}},{"generated":{"line":19,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":14,"column":1}},{"name":"constructor","generated":{"line":24,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":1}},{"name":"constructor","generated":{"line":24,"column":2},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":1}},{"generated":{"line":24,"column":13},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":12}},{"name":"texelSize","generated":{"line":24,"column":14},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":13}},{"generated":{"line":24,"column":23},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":22}},{"generated":{"line":24,"column":26},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":25}},{"name":"Vector2","generated":{"line":24,"column":30},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":29}},{"generated":{"line":24,"column":44},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":25}},{"generated":{"line":24,"column":46},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":12}},{"generated":{"line":24,"column":48},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":20,"column":40}},{"generated":{"line":25,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":2}},{"generated":{"line":25,"column":10},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"type","generated":{"line":26,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":24,"column":3}},{"name":"type","generated":{"line":26,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":24,"column":3}},{"generated":{"line":26,"column":10},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":24,"column":7}},{"generated":{"line":26,"column":12},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":24,"column":9}},{"generated":{"line":26,"column":33},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"defines","generated":{"line":27,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":3}},{"name":"defines","generated":{"line":27,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":3}},{"generated":{"line":27,"column":13},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":10}},{"generated":{"line":27,"column":15},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"generated":{"line":28,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":28,"column":4}},{"name":"MAX_SEARCH_STEPS_INT","generated":{"line":29,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":29,"column":4}},{"name":"MAX_SEARCH_STEPS_INT","generated":{"line":29,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":29,"column":4}},{"generated":{"line":29,"column":28},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":29,"column":24}},{"generated":{"line":29,"column":30},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":29,"column":26}},{"generated":{"line":29,"column":33},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"name":"MAX_SEARCH_STEPS_FLOAT","generated":{"line":30,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":30,"column":4}},{"name":"MAX_SEARCH_STEPS_FLOAT","generated":{"line":30,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":30,"column":4}},{"generated":{"line":30,"column":30},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":30,"column":26}},{"generated":{"line":30,"column":32},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":30,"column":28}},{"generated":{"line":30,"column":37},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"generated":{"line":31,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":32,"column":4}},{"name":"AREATEX_MAX_DISTANCE","generated":{"line":32,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":33,"column":4}},{"name":"AREATEX_MAX_DISTANCE","generated":{"line":32,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":33,"column":4}},{"generated":{"line":32,"column":28},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":33,"column":24}},{"generated":{"line":32,"column":30},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":33,"column":26}},{"generated":{"line":32,"column":36},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"name":"AREATEX_PIXEL_SIZE","generated":{"line":33,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":34,"column":4}},{"name":"AREATEX_PIXEL_SIZE","generated":{"line":33,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":34,"column":4}},{"generated":{"line":33,"column":26},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":34,"column":22}},{"generated":{"line":33,"column":28},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":34,"column":24}},{"generated":{"line":33,"column":56},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"name":"AREATEX_SUBTEX_SIZE","generated":{"line":34,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":35,"column":4}},{"name":"AREATEX_SUBTEX_SIZE","generated":{"line":34,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":35,"column":4}},{"generated":{"line":34,"column":27},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":35,"column":23}},{"generated":{"line":34,"column":29},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":35,"column":25}},{"generated":{"line":34,"column":42},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"name":"SEARCHTEX_SIZE","generated":{"line":35,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":36,"column":4}},{"name":"SEARCHTEX_SIZE","generated":{"line":35,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":36,"column":4}},{"generated":{"line":35,"column":22},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":36,"column":18}},{"generated":{"line":35,"column":24},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":36,"column":20}},{"generated":{"line":35,"column":42},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"name":"SEARCHTEX_PACKED_SIZE","generated":{"line":36,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":37,"column":4}},{"name":"SEARCHTEX_PACKED_SIZE","generated":{"line":36,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":37,"column":4}},{"generated":{"line":36,"column":29},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":37,"column":25}},{"generated":{"line":36,"column":31},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":37,"column":27}},{"generated":{"line":37,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":26,"column":12}},{"generated":{"line":37,"column":7},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"uniforms","generated":{"line":38,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":3}},{"name":"uniforms","generated":{"line":38,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":3}},{"generated":{"line":38,"column":14},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":11}},{"generated":{"line":38,"column":16},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":13}},{"name":"inputBuffer","generated":{"line":39,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":4}},{"name":"inputBuffer","generated":{"line":39,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":4}},{"generated":{"line":39,"column":19},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":15}},{"generated":{"line":39,"column":21},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":17}},{"name":"Uniform","generated":{"line":39,"column":25},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":21}},{"generated":{"line":39,"column":39},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":17}},{"generated":{"line":39,"column":40},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":29}},{"generated":{"line":39,"column":44},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":43,"column":17}},{"generated":{"line":39,"column":45},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":13}},{"name":"areaTexture","generated":{"line":40,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":4}},{"name":"areaTexture","generated":{"line":40,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":4}},{"generated":{"line":40,"column":19},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":15}},{"generated":{"line":40,"column":21},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":17}},{"name":"Uniform","generated":{"line":40,"column":25},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":21}},{"generated":{"line":40,"column":39},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":17}},{"generated":{"line":40,"column":40},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":29}},{"generated":{"line":40,"column":44},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":44,"column":17}},{"generated":{"line":40,"column":45},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":13}},{"name":"searchTexture","generated":{"line":41,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":4}},{"name":"searchTexture","generated":{"line":41,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":4}},{"generated":{"line":41,"column":21},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":17}},{"generated":{"line":41,"column":23},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":19}},{"name":"Uniform","generated":{"line":41,"column":27},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":23}},{"generated":{"line":41,"column":41},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":19}},{"generated":{"line":41,"column":42},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":31}},{"generated":{"line":41,"column":46},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":45,"column":19}},{"generated":{"line":41,"column":47},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":13}},{"name":"texelSize","generated":{"line":42,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":4}},{"name":"texelSize","generated":{"line":42,"column":8},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":4}},{"generated":{"line":42,"column":17},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":13}},{"generated":{"line":42,"column":19},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":15}},{"name":"Uniform","generated":{"line":42,"column":23},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":19}},{"generated":{"line":42,"column":37},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":15}},{"name":"texelSize","generated":{"line":42,"column":38},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":27}},{"generated":{"line":42,"column":47},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":46,"column":15}},{"generated":{"line":43,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":41,"column":13}},{"generated":{"line":43,"column":7},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"fragmentShader","generated":{"line":44,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":50,"column":3}},{"name":"fragmentShader","generated":{"line":44,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":50,"column":3}},{"generated":{"line":44,"column":20},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":50,"column":17}},{"name":"fragment","generated":{"line":44,"column":22},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":50,"column":19}},{"generated":{"line":44,"column":30},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"vertexShader","generated":{"line":45,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":51,"column":3}},{"name":"vertexShader","generated":{"line":45,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":51,"column":3}},{"generated":{"line":45,"column":18},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":51,"column":15}},{"name":"vertex","generated":{"line":45,"column":20},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":51,"column":17}},{"generated":{"line":45,"column":26},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"depthWrite","generated":{"line":46,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":53,"column":3}},{"name":"depthWrite","generated":{"line":46,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":53,"column":3}},{"generated":{"line":46,"column":16},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":53,"column":13}},{"generated":{"line":46,"column":18},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":53,"column":15}},{"generated":{"line":46,"column":23},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"name":"depthTest","generated":{"line":47,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":54,"column":3}},{"name":"depthTest","generated":{"line":47,"column":6},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":54,"column":3}},{"generated":{"line":47,"column":15},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":54,"column":12}},{"generated":{"line":47,"column":17},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":54,"column":14}},{"generated":{"line":48,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":8}},{"generated":{"line":48,"column":5},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":22,"column":2}},{"generated":{"line":49,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":58,"column":2}},{"generated":{"line":50,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":60,"column":1}},{"name":"setOrthogonalSearchSteps","generated":{"line":62,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":71,"column":1}},{"name":"setOrthogonalSearchSteps","generated":{"line":62,"column":2},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":71,"column":1}},{"generated":{"line":62,"column":26},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":71,"column":25}},{"name":"steps","generated":{"line":62,"column":27},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":71,"column":26}},{"generated":{"line":62,"column":32},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":71,"column":25}},{"generated":{"line":62,"column":34},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":71,"column":33}},{"generated":{"line":63,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":2}},{"name":"defines","generated":{"line":63,"column":9},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":7}},{"generated":{"line":63,"column":16},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":2}},{"name":"MAX_SEARCH_STEPS_INT","generated":{"line":63,"column":17},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":15}},{"generated":{"line":63,"column":37},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":2}},{"name":"steps","generated":{"line":63,"column":40},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":38}},{"generated":{"line":63,"column":45},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":43}},{"name":"toFixed","generated":{"line":63,"column":46},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":44}},{"generated":{"line":63,"column":53},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":38}},{"generated":{"line":63,"column":54},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":52}},{"generated":{"line":63,"column":57},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":38}},{"generated":{"line":63,"column":58},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":73,"column":2}},{"generated":{"line":64,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":2}},{"name":"defines","generated":{"line":64,"column":9},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":7}},{"generated":{"line":64,"column":16},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":2}},{"name":"MAX_SEARCH_STEPS_FLOAT","generated":{"line":64,"column":17},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":15}},{"generated":{"line":64,"column":39},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":2}},{"name":"steps","generated":{"line":64,"column":42},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":40}},{"generated":{"line":64,"column":47},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":45}},{"name":"toFixed","generated":{"line":64,"column":48},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":46}},{"generated":{"line":64,"column":55},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":40}},{"generated":{"line":64,"column":56},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":54}},{"generated":{"line":64,"column":59},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":40}},{"generated":{"line":64,"column":60},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":74,"column":2}},{"generated":{"line":65,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":75,"column":2}},{"name":"needsUpdate","generated":{"line":65,"column":9},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":75,"column":7}},{"generated":{"line":65,"column":20},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":75,"column":2}},{"generated":{"line":65,"column":23},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":75,"column":21}},{"generated":{"line":65,"column":27},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":75,"column":2}},{"generated":{"line":66,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":77,"column":2}},{"generated":{"line":68,"column":0},"source":"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js","original":{"line":12,"column":56}}],"sources":{"../node_modules/postprocessing/src/materials/SMAAWeightsMaterial.js":"import { ShaderMaterial, Uniform, Vector2 } from \"three\";\r\n\r\nconst fragment = \"#define sampleLevelZeroOffset(t, coord, offset) texture2D(t, coord + float(offset) * texelSize, 0.0)\\r\\n\\r\\nuniform sampler2D inputBuffer;\\r\\nuniform sampler2D areaTexture;\\r\\nuniform sampler2D searchTexture;\\r\\n\\r\\nuniform vec2 texelSize;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nvarying vec4 vOffset[3];\\r\\nvarying vec2 vPixCoord;\\r\\n\\r\\nvec2 round(vec2 x) {\\r\\n\\r\\n\\treturn sign(x) * floor(abs(x) + 0.5);\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchLength(vec2 e, float bias, float scale) {\\r\\n\\r\\n\\t// Not required if searchTexture accesses are set to point.\\r\\n\\t// const vec2 SEARCH_TEX_PIXEL_SIZE = 1.0 / vec2(66.0, 33.0);\\r\\n\\t// e = vec2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE + e * vec2(scale, 1.0) * vec2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\\r\\n\\r\\n\\te.r = bias + e.r * scale;\\r\\n\\r\\n\\treturn 255.0 * texture2D(searchTexture, e, 0.0).r;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchXLeft(vec2 texCoord, float end) {\\r\\n\\r\\n\\t/* @PSEUDO_GATHER4\\r\\n\\t * This texCoord has been offset by (-0.25, -0.125) in the vertex shader to\\r\\n\\t * sample between edge, thus fetching four edges in a row.\\r\\n\\t * Sampling with different offsets in each direction allows to disambiguate\\r\\n\\t * which edges are active from the four fetched ones.\\r\\n\\t */\\r\\n\\r\\n\\tvec2 e = vec2(0.0, 1.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord -= vec2(2.0, 0.0) * texelSize;\\r\\n\\r\\n\\t\\tif(!(texCoord.x > end && e.g > 0.8281 && e.r == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Correct the previously applied offset (-0.25, -0.125).\\r\\n\\ttexCoord.x += 0.25 * texelSize.x;\\r\\n\\r\\n\\t// The searches are biased by 1, so adjust the coords accordingly.\\r\\n\\ttexCoord.x += texelSize.x;\\r\\n\\r\\n\\t// Disambiguate the length added by the last step.\\r\\n\\ttexCoord.x += 2.0 * texelSize.x; // Undo last step.\\r\\n\\ttexCoord.x -= texelSize.x * searchLength(e, 0.0, 0.5);\\r\\n\\r\\n\\treturn texCoord.x;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchXRight(vec2 texCoord, float end) {\\r\\n\\r\\n\\tvec2 e = vec2(0.0, 1.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord += vec2(2.0, 0.0) * texelSize;\\r\\n\\r\\n\\t\\tif(!(texCoord.x < end && e.g > 0.8281 && e.r == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\ttexCoord.x -= 0.25 * texelSize.x;\\r\\n\\ttexCoord.x -= texelSize.x;\\r\\n\\ttexCoord.x -= 2.0 * texelSize.x;\\r\\n\\ttexCoord.x += texelSize.x * searchLength(e, 0.5, 0.5);\\r\\n\\r\\n\\treturn texCoord.x;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchYUp(vec2 texCoord, float end) {\\r\\n\\r\\n\\tvec2 e = vec2(1.0, 0.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord += vec2(0.0, 2.0) * texelSize; // Changed sign.\\r\\n\\r\\n\\t\\tif(!(texCoord.y > end && e.r > 0.8281 && e.g == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\ttexCoord.y -= 0.25 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y -= texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y -= 2.0 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y += texelSize.y * searchLength(e.gr, 0.0, 0.5); // Changed sign.\\r\\n\\r\\n\\treturn texCoord.y;\\r\\n\\r\\n}\\r\\n\\r\\nfloat searchYDown(vec2 texCoord, float end) {\\r\\n\\r\\n\\tvec2 e = vec2(1.0, 0.0);\\r\\n\\r\\n\\tfor(int i = 0; i < MAX_SEARCH_STEPS_INT; ++i ) {\\r\\n\\r\\n\\t\\te = texture2D(inputBuffer, texCoord, 0.0).rg;\\r\\n\\t\\ttexCoord -= vec2(0.0, 2.0) * texelSize; // Changed sign.\\r\\n\\r\\n\\t\\tif(!(texCoord.y < end && e.r > 0.8281 && e.g == 0.0)) { break; }\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\ttexCoord.y += 0.25 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y += texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y += 2.0 * texelSize.y; // Changed sign.\\r\\n\\ttexCoord.y -= texelSize.y * searchLength(e.gr, 0.5, 0.5); // Changed sign.\\r\\n\\r\\n\\treturn texCoord.y;\\r\\n\\r\\n}\\r\\n\\r\\nvec2 area(vec2 dist, float e1, float e2, float offset) {\\r\\n\\r\\n\\t// Rounding prevents precision errors of bilinear filtering.\\r\\n\\tvec2 texCoord = AREATEX_MAX_DISTANCE * round(4.0 * vec2(e1, e2)) + dist;\\r\\n\\r\\n\\t// Scale and bias for texel space translation.\\r\\n\\ttexCoord = AREATEX_PIXEL_SIZE * texCoord + (0.5 * AREATEX_PIXEL_SIZE);\\r\\n\\r\\n\\t// Move to proper place, according to the subpixel offset.\\r\\n\\ttexCoord.y += AREATEX_SUBTEX_SIZE * offset;\\r\\n\\r\\n\\treturn texture2D(areaTexture, texCoord, 0.0).rg;\\r\\n\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvec4 weights = vec4(0.0);\\r\\n\\tvec4 subsampleIndices = vec4(0.0);\\r\\n\\tvec2 e = texture2D(inputBuffer, vUv).rg;\\r\\n\\r\\n\\tif(e.g > 0.0) {\\r\\n\\r\\n\\t\\t// Edge at north.\\r\\n\\t\\tvec2 d;\\r\\n\\r\\n\\t\\t// Find the distance to the left.\\r\\n\\t\\tvec2 coords;\\r\\n\\t\\tcoords.x = searchXLeft(vOffset[0].xy, vOffset[2].x);\\r\\n\\t\\tcoords.y = vOffset[1].y; // vOffset[1].y = vUv.y - 0.25 * texelSize.y (@CROSSING_OFFSET)\\r\\n\\t\\td.x = coords.x;\\r\\n\\r\\n\\t\\t/* Now fetch the left crossing edges, two at a time using bilinear\\r\\n\\t\\tfiltering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to discern what\\r\\n\\t\\tvalue each edge has. */\\r\\n\\t\\tfloat e1 = texture2D(inputBuffer, coords, 0.0).r;\\r\\n\\r\\n\\t\\t// Find the distance to the right.\\r\\n\\t\\tcoords.x = searchXRight(vOffset[0].zw, vOffset[2].y);\\r\\n\\t\\td.y = coords.x;\\r\\n\\r\\n\\t\\t/* Translate distances to pixel units for better interleave arithmetic and\\r\\n\\t\\tmemory accesses. */\\r\\n\\t\\td = d / texelSize.x - vPixCoord.x;\\r\\n\\r\\n\\t\\t// The area texture is compressed quadratically.\\r\\n\\t\\tvec2 sqrtD = sqrt(abs(d));\\r\\n\\r\\n\\t\\t// Fetch the right crossing edges.\\r\\n\\t\\tcoords.y -= texelSize.y; // WebGL port note: Added.\\r\\n\\t\\tfloat e2 = sampleLevelZeroOffset(inputBuffer, coords, ivec2(1, 0)).r;\\r\\n\\r\\n\\t\\t// Pattern recognised, now get the actual area.\\r\\n\\t\\tweights.rg = area(sqrtD, e1, e2, subsampleIndices.y);\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tif(e.r > 0.0) {\\r\\n\\r\\n\\t\\t// Edge at west.\\r\\n\\t\\tvec2 d;\\r\\n\\r\\n\\t\\t// Find the distance to the top.\\r\\n\\t\\tvec2 coords;\\r\\n\\t\\tcoords.y = searchYUp(vOffset[1].xy, vOffset[2].z);\\r\\n\\t\\tcoords.x = vOffset[0].x; // vOffset[1].x = vUv.x - 0.25 * texelSize.x;\\r\\n\\t\\td.x = coords.y;\\r\\n\\r\\n\\t\\t// Fetch the top crossing edges.\\r\\n\\t\\tfloat e1 = texture2D(inputBuffer, coords, 0.0).g;\\r\\n\\r\\n\\t\\t// Find the distance to the bottom.\\r\\n\\t\\tcoords.y = searchYDown(vOffset[1].zw, vOffset[2].w);\\r\\n\\t\\td.y = coords.y;\\r\\n\\r\\n\\t\\t// Distances in pixel units.\\r\\n\\t\\td = d / texelSize.y - vPixCoord.y;\\r\\n\\r\\n\\t\\t// The area texture is compressed quadratically.\\r\\n\\t\\tvec2 sqrtD = sqrt(abs(d));\\r\\n\\r\\n\\t\\t// Fetch the bottom crossing edges.\\r\\n\\t\\tcoords.y -= texelSize.y; // WebGL port note: Added.\\r\\n\\t\\tfloat e2 = sampleLevelZeroOffset(inputBuffer, coords, ivec2(0, 1)).g;\\r\\n\\r\\n\\t\\t// Get the area for this direction.\\r\\n\\t\\tweights.ba = area(sqrtD, e1, e2, subsampleIndices.x);\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tgl_FragColor = weights;\\r\\n\\r\\n}\\r\\n\";\r\nconst vertex = \"uniform vec2 texelSize;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nvarying vec4 vOffset[3];\\r\\nvarying vec2 vPixCoord;\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvUv = uv;\\r\\n\\r\\n\\tvPixCoord = uv / texelSize;\\r\\n\\r\\n\\t// Offsets for the searches (see @PSEUDO_GATHER4).\\r\\n\\tvOffset[0] = uv.xyxy + texelSize.xyxy * vec4(-0.25, 0.125, 1.25, 0.125); // Changed sign in Y and W components.\\r\\n\\tvOffset[1] = uv.xyxy + texelSize.xyxy * vec4(-0.125, 0.25, -0.125, -1.25); //Changed sign in Y and W components.\\r\\n\\r\\n\\t// This indicates the ends of the loops.\\r\\n\\tvOffset[2] = vec4(vOffset[0].xz, vOffset[1].yw) + vec4(-2.0, 2.0, -2.0, 2.0) * texelSize.xxyy * MAX_SEARCH_STEPS_FLOAT;\\r\\n\\r\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\r\\n\\r\\n}\\r\\n\";\r\n\r\n/**\r\n * Subpixel Morphological Antialiasing.\r\n *\r\n * This material computes weights for detected edges.\r\n */\r\n\r\nexport class SMAAWeightsMaterial extends ShaderMaterial {\r\n\r\n\t/**\r\n\t * Constructs a new SMAA weights material.\r\n\t *\r\n\t * @param {Vector2} [texelSize] - The absolute screen texel size.\r\n\t */\r\n\r\n\tconstructor(texelSize = new Vector2()) {\r\n\r\n\t\tsuper({\r\n\r\n\t\t\ttype: \"SMAAWeightsMaterial\",\r\n\r\n\t\t\tdefines: {\r\n\r\n\t\t\t\t// Configurable settings:\r\n\t\t\t\tMAX_SEARCH_STEPS_INT: \"8\",\r\n\t\t\t\tMAX_SEARCH_STEPS_FLOAT: \"8.0\",\r\n\r\n\t\t\t\t// Non-configurable settings:\r\n\t\t\t\tAREATEX_MAX_DISTANCE: \"16.0\",\r\n\t\t\t\tAREATEX_PIXEL_SIZE: \"(1.0 / vec2(160.0, 560.0))\",\r\n\t\t\t\tAREATEX_SUBTEX_SIZE: \"(1.0 / 7.0)\",\r\n\t\t\t\tSEARCHTEX_SIZE: \"vec2(66.0, 33.0)\",\r\n\t\t\t\tSEARCHTEX_PACKED_SIZE: \"vec2(64.0, 16.0)\"\r\n\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tinputBuffer: new Uniform(null),\r\n\t\t\t\tareaTexture: new Uniform(null),\r\n\t\t\t\tsearchTexture: new Uniform(null),\r\n\t\t\t\ttexelSize: new Uniform(texelSize)\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfragmentShader: fragment,\r\n\t\t\tvertexShader: vertex,\r\n\r\n\t\t\tdepthWrite: false,\r\n\t\t\tdepthTest: false\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the maximum amount of steps performed in the horizontal/vertical\r\n\t * pattern searches, at each side of the pixel.\r\n\t *\r\n\t * In number of pixels, it's actually the double. So the maximum line length\r\n\t * perfectly handled by, for example 16, is 64 (perfectly means that longer\r\n\t * lines won't look as good, but are still antialiased).\r\n\t *\r\n\t * @param {Number} steps - The search steps. Range: [0, 112].\r\n\t */\r\n\r\n\tsetOrthogonalSearchSteps(steps) {\r\n\r\n\t\tthis.defines.MAX_SEARCH_STEPS_INT = steps.toFixed(\"0\");\r\n\t\tthis.defines.MAX_SEARCH_STEPS_FLOAT = steps.toFixed(\"1\");\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n"},"lineCount":null}},"hash":"cb6d8f825ae2cae116c51e77dc2bebdd","cacheData":{"env":{}}}